MySQL 优化：
	Explain 命令是解决数据库性能上的第一推荐使用命令。
	大部分性能问题可以通过此命令来简单解决。
	
		explain select * from tables_name;
	
	输出：
		 id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |
		 
各字段属性：（9种）
	id：select 查询序列号；id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行
							id相同由上而下执行。
	select_type :是select 查询类型，有以下几种：
				1.SIMPLE：简单查询，不使用union或子查询；
				2.PRIMARY：最外面的select
				3.UNION：UNION中的第二个或后面的select语句
				4.DEPENDENT UNION：UNION中的第二个或者后面的select查询，取决于外面的查询
				5.UNION RESULT： union的结果
				6.SUBQUERY： 子查询中的第一个select
				7.DEPENDENT SUBQUERY：子查询的第一个select，取决于外部的查询
				8.DERIVED：导出表的select。
				
	table： 显示该行数据是关于哪张表的，
	type：这列最重要，显示连接使用了哪种级别，有无使用索引
			结果值由好到坏依次是 ：（12种级别）
				system > const > eq_ref > ref > fulltext > ref_or_null > index_merge > unique_subquery > index_subquery > range > index > ALL

					一般来说，得保证查询至少达到range级别，最好能达到ref，否则就可能会出现性能问题。

	possible_keys: 列出MySQL能使用哪个索引在该表中找到行
	
	key：显示MySQL实际决定使用的键（索引），如果没有选择索引，键是null；
	key_len: 显示MySQL实际使用键的长度，如果键是null，那么长度为null，使用的索引的长度，在不损失精度的情况下，长度越短越好，
	ref :显示使用哪个列或常数与key一起执行
	Extra： 包含解决MySQL查询的详细信息，
			Distinct
			一旦MYSQL找到了与行相联合匹配的行，就不再搜索了

			Not exists
			MYSQL 优化了LEFT JOIN，一旦它找到了匹配LEFT JOIN标准的行，

			就不再搜索了

			Range checked for each

			Record（index map:#）
			没有找到理想的索引，因此对于从前面表中来的每一 个行组合，MYSQL检查使用哪个索引，并用它来从表中返回行。这是使用索引的最慢的连接之一

			Using filesort
			看到这个的时候，查询就需要优化了。MYSQL需要进行额外的步骤来发现如何对返回的行排序。它根据连接类型以及存储排序键值和匹配条件的全部行的行指针来 排序全部行

			Using index
			列数据是从仅仅使用了索引中的信息而没有读取实际的行动的表返回的，这发生在对表 的全部的请求列都是同一个索引的部分的时候

			Using temporary
			看到这个的时候，查询需要优化了。这 里，MYSQL需要创建一个临时表来存储结果，这通常发生在对不同的列集进行ORDER BY上，而不是GROUP BY上

			Using where
			使用了WHERE从句来限制哪些行将与下一张表匹配或者是返回给用户。如果不想返回表中的全部行，并且连接类型ALL或index， 这就会发生，或者是查询有问题
			
	当type 显示为 “index” 时，并且Extra显示为“Using Index”， 表明使用了覆盖索引。