MySQL性能优化：
	1.查询缓存优化查询
	2.EXPLAIN 查询select语句
	3.当只有一行数据时使用limit 1;	
		当已知结果只有一条数据时，加上limit 1 可以增加性能；
	4.为搜索字段增加索引
		为经常使用的字段增加索引； 后模糊搜索走索引
	5.在join表时，使用相当类型的列，并将其索引；
	6.不要使用order by rand();
	7.避免使用select * 方式；
	8.为每张表设置主键ID，最好是int型；
	9.使用 ENUM 而不是 VARCHAR
	10.从 PROCEDURE ANALYSE() 取得建议
	11.尽可能使用not null；
	12.无缓冲的查询
	13.把IP地址存成 UNSIGNED INT；
		我们必需要使用UNSIGNED INT，因为 IP地址会使用整个32位的无符号整形。
		而你的查询，你可以使用 INET_ATON() 来把一个字符串IP转成一个整形，并使用 INET_NTOA() 把一个整形转成一个字符串IP。
		在PHP中，也有这样的函数 ip2long() 和 long2ip()。
	14.固定长度的表会更快；
	15.垂直分割
		“垂直分割”是一种把数据库中的表按列变成几张表的方法，这样可以降低表的复杂度和字段的数目，从而达到优化的目的。
			（以前，在银行做过项目，见过一张表有100多个字段，很恐怖）
	16. 拆分大的 DELETE 或 INSERT 语句
		如果你需要在一个在线的网站上去执行一个大的 DELETE 或 INSERT 查询，你需要非常小心，
		要避免你的操作让你的整个网站停止相应。因为这两个操作是会锁表的，表一锁住了，别的操作都进不来了。
	17. 越小的列会越快；
	18. 选择正确的存储引擎
	19. 使用一个对象关系映射器（Object Relational Mapper）
		使用ORM (Object Relational Mapper)，你能够获得可靠的性能增涨。一个ORM可以做的所有事情，也能被手动的编写出来。
		但是，这需要一个高级专家。ORM 的最重要的是“Lazy Loading”，也就是说，只有在需要的去取值的时候才会去真正的去做。
		但你也需要小心这种机制的副作用，因为这很有可能会因为要去创建很多很多小的查询反而会降低性能。
		ORM 还可以把你的SQL语句打包成一个事务，这会比单独执行他们快得多得多。