8.for-in循环适用于遍历对象属性或原型链的，对于遍历以数字索引的应当使用for循环常规写法。
	在JS中使用for-in记性循环遍历时，尽量使用hasPwnProperty()方法获取是否为当前对象的属相，除非查找原型链，应当注释
		例如： for （pro in  Object）{
					if(Object.hasPwnProperty(pro)){
						语句块；
					}
				}

9.JavaScript的自执行函数 使用()表示自执行，（）只是表示自执行作用
	(function(){})(); 是 把函数当作表达式解析，然后执行解析后的函数，与
		相当于 var a = function(){}; a(); a得到的是函数
	(function(){}()); 是把函数表达式和执行当作语句直接执行，与!function(){}() 和+function(){}()相同作用
		相当于 var a = function(){}(); a得到的是结果
		
自执行函数避免用函数名污染全局命名空间


在多个文件中使用严格模式而不必在写很多行“use strict”，可以使用立即执行函数(尽可能少使用严格模式)
	例如:
		(function(){
			“use strict”
			function doSomething(){};
			function doElseSomething(){};
		}())
		

10.在JavaScript中做比较时，==与!=会涉及强制类型转换；而使用 === 与!== 则不会涉及强制类型转换，若类型不相同则判定为false；
	如果数字和字符串比较，由于JS有强制类型转换机制，会将字符串首先转换为数字；
	如果一个布尔值和数字比较，布尔值会首先转换为数字，false转换成0，true转换成1；
	如果一个是对象另一个不是，则会首先调用对象的valueOf()方法，若不存在该方法则调用toString()方法；
	
	
	null表示已声明已赋值为null
	undefined 表示声明但未赋值
	
11.eval()函数，参数是个字符串，eval函数会将传进的参数当做代码执行
	Function()、setTimeOut()、setInterval()函数同样可以执行JavaScript字符串，但一般尽可能不用这四个函数，
		可以使用JSON字符串
		
12. JavaScript中尽量避免使用原始包装类型String Boolean和Number

13.闭包 可以简单理解成“定义在一个函数内部的函数“；
	在本质上，闭包是将函数内部和函数外部连接起来的桥梁。
	
	闭包为了访问外部变量，函数的作用域是产生函数的作用域而不是执行函数的作用域

 最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中，不会在f1调用后被自动清除；
 
使用闭包的注意点

（1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄			露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。

（2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public 		Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。


14.全局变量
	全局变量
	单全局变量
	零全局变量：使用自执行函数可满足需要
	
	Require()函数，是一个全局函数，专门用来加载指定依赖和执行回调函数，用来引入其他模块
	

15.在JavaScript代码书写中尽量提取方法


数组遍历方法
16. foreach 方法
	forEach和map都支持2个参数：一个是回调函数（item,index,list）和上下文；
									数组中的当前项item,当前项的索引index,原始数组input；
	forEach方法中的this是ary,匿名回调函数中的this默认是window；
		理论上这个方法是没有返回值的，仅仅是遍历数组中的每一项，不对原来数组进行修改；
		但是我们可以自己通过数组的索引来修改原来的数组；
	兼容写法：/**
				* forEach遍历数组
				* @param callback [function] 回调函数；
				* @param context [object] 上下文；
				*/
				Array.prototype.myForEach = function myForEach(callback,context){
				??context = context || window;
				??if('forEach' in Array.prototye) {
				????this.forEach(callback,context);
				????return;
				??}
				??//IE6-8下自己编写回调函数执行的逻辑
				??for(var i = 0,len = this.length; i < len;i++) {
				????callback && callback.call(context,this[i],i,this);
				??}
				}
		
		
	map方法：
		和forEach非常相似，都是用来遍历数组中的每一项值的，用来遍历数组中的每一项；

	……区别：map的回调函数中支持return返回值；return的是啥，相当于把数组中的这一项变为啥
	（并不影响原来的数组，只是相当于把原数组克隆一份，把克隆的这一份的数组中的对应项改变了）；

	……不管是forEach还是map 都支持第二个参数值，第二个参数的意思是把匿名回调函数中的this进行修改。
	
	兼容写法：/**
				* map遍历数组
				* @param callback [function] 回调函数；
				* @param context [object] 上下文；
				*/
				Array.prototype.myMap = function myMap(callback,context){
				  context = context || window;
				  if('map' in Array.prototye) {
					return this.map(callback,context);
				  }
				  //IE6-8下自己编写回调函数执行的逻辑
				  var newAry = [];
				  for(var i = 0,len = this.length; i < len;i++) {
					if(typeof callback === 'function') {
					  var val = callback.call(context,this[i],i,this);
					  newAry[newAry.length] = val;
					}
				  }
				  return newAry;
				}
				

17.检测
		检测原始值：typeof  ;
		检测引用值：instanceof ;
		检测函数： typeof ;  IE8及以前版本检测返回为object ;
		检测数组： isArray() ;
		检测属性是否存在 ：使用in运算符, 例如：
										var obj = {
											count: 0,
											name: 'li'
										}
										
										if ('count' in obj){}
										
				如果简单检测实例对象的属性是否存在 可以使用 hasOwnProperty()方法，
				所有继承自Object的JS对象都具有这个方法，但IE8之前版本，DOM对象并非继承自Object对象；
				
				
18 对需要配置的数据
	URL
	需要展现给用户的字符串
	重复值
	设置值
	任何可能发生变化的值
	
可以将配置数据放入对象，如config;亦可  先将配置数据放入java属性文件在转换为jS可用的配置信息

java的属性文件使用properties文件，可以将properties文件转换为JavaScript可用的属性文件：可用Props2js工具
JavaScript的配置文件可选用方式：
	1.JSON 数据格式；
	2.JSONP  将JSON数据放入一个函数封装起来；例如 myFunc({JSON 对象})
	3.纯JavaScript， 是将JSON对象赋值给一个变量
	
-==============================================================================================================	

19. 
	基于对象的继承
		object.create()实现了一种简单的继承;
			第一个参数是继承的对象，可添加第二个对象，该参数对象中的属性和方法将被添加到新的对象中。
				例：var obj = {};
					var myObj = object.create(obj);
			
	-----------------------------------------------------------------------------------------------------------	
	
	基于类型的继承		（类似使用函数）
		基于类型的继承依赖于原型，基于类型的继承使用通过构造函数实现的，不是通过对象。
		例如：
			function MyError(){}
				MyError.prototype = new Error();
		基于类型的继承一共分为两步：
			首先，原型继承；然后构造器继承
			构造器继承是调用超类的构造函数时传入新建对象作为其this的值
				例如：
					function Person(name){this.name = name}
					function Author(name){Person.call(this,name)} --继承构造器
					
					Author.prototype = new Person;
					
		
20.  门面模式		？？？？？？？？
	为已存在的对象创建新的接口，也叫包装器，使用不同的接口来包装已存在的对象
	
	
21. polyfills
	避免使用
	
	
	=================================================
	模拟原生的数组Array的forEach()方法
	Array.prototype.forEach=function(fun,context){
            var len=this.length;
            var context=arguments[1];     //即使为undefined，call函数也正常运行。
            if(typeof fun !=="function"){
                throw "输入正确函数!";
            }
            for(var i=0;i<len;i++){
                fun.call(context,this[i],i,this);
            }
	};
 ===============================================
	
22. 阻止修改，三种锁定级别，逐渐
		防止拓展
			禁止为对象添加属性和方法，但修改和删除已存在的属性和方法;
			
		密封
			类似防止拓展，而且禁止为对象删除已存在的属性和方法,被密封的对象也是不可拓展的;
		冻结
			类似密封。而且禁止为对象修改已存在的方法和属性（所有字段均为只读),冻结的对象也是不可拓展和密封的;
			
	每种锁定级别都有两个方法：
				一种是用于实时操作；
				一种是检测是否应用了相应操作
		防止拓展的方法：
			1. Object.preventExtension()
			2. Object.isExtensible()
		
		密封的方法：
			1. Object.seal()
			2. Object.isSealed()
			
		冻结的方法：
			1. Object.freeze()
			2. Object.isFrozen()
			
	一旦一个对象被锁定，将无法解锁！！
	在非严格模式下，对相应锁定的对象进行相应操作，只会悄无声息的失败，
		建议使用严格模式，会抛出错误
		
		
******************************************************************************************************************
==================================================================================================================

23.  浏览器嗅探--------需重新看
	最早的浏览器嗅探即用户检测服务器与客户端根据user-agent字符串来确定浏览器类型。
	
	
24. 自动化
	
25. 文件和目录结构
	1.最佳实践
		一个文件只包含一个对象;
		相关文件用目录分组;
		保持第三方代码独立；
		保持测试代码的完整性;
		确定创建位置。
		
	-----------------------------------------------------
	2. 基本目录结构
		build        	用于放置最终构建后的文件，理想情况下不应提交；
		src			 	用于放置所有的源文件；
		test 或tests  	用来放置所有的测试文件
		
******************************************************************************************************************
==================================================================================================================

26.  JavaScript构建工具 --- Ant

	1. 配置文件
		Ant的配置文件主要是build.xml 文件
		当运行Ant，但未指定配置文件时，会优先在当前的工作目录下寻找这个配置文件，build.xml 文件必须存在。
		
		Ant构建系统有三个基本组成部分：
		任务
			任务是构建过程的一个步骤；
		目标
			一组有序任务的集合
		项目
			所有目标的容器
			
		构建系统的每个部分都是由xml元素表示；
			每个build.xml 文件都都是始于一个代表整个项目的<project>元素且该元素必须指定name属性，name用来唯一标识这个项目
			如果没有明确指出要执行的目标，default属性所指示的目标会被作为默认目标执行。
		------------
		目标 使用<target>元素来表示，name属性也是必须的。<echo>代表一个回显任务
			可以在一个目标中有多个任务，也可以在一个项目中有多个目标
			
		标准的做法是尽可能的颗粒化细分目标。
	
	---------------------------
	
	2. 执行构建--
		在命令行输入 ant ，默认情况下Ant会读取build.xml 文件并读取<project>元素的 default属性 以确定执行哪个目标；
		也可以在命令行显示通过参数显式的指定要运行的目标，则当显式指定目标后，ant就不会再使用default属性值默认的目标。
		
	------------------------
	
	3. 目标操作的依赖
		每个目标都可能被指定依赖关系---即其他被依赖的目标必须在当前目标执行之前成功执行。
		依赖关系通过 depends 属性来指定，多个依赖关系之间使用半角逗号（,）分隔，被依赖的目标首先被执行。
			例如：
						--name用于标识唯一项目，   default默认执行目标
				<project name="maintainablejs" default="hello">
				--项目中的目标    name标识目标名称   depends表示当前目标的依赖目标
					<target name="hello" depends="">
						--echo属性表示输出任务
						<echo>Hello world!</echo>
					</target>
					<target name="goodbye" depends="val1,val2,val3">
						<echo>GoodBye!!</echo>
					</target>
				</project>
		
		被依赖的目标会在当前目标执行之前执行成功。
		
	在大多数构建文件中，有一小部分的目标会被经常用到。  
		汇总目标！！！  以特定的顺序执行多个目标，大多数目标都是设计用于汇总目标的一个步骤
		
	--------------------------	
	
	4.  属性 *******************************
		属性通常包含数据，而这些数据在执行脚本期间可以被操作和改变
		可以使用 <property>标签来定义属性
			例如：
			--name用于标识唯一项目，   default默认执行目标
				<project name="maintainablejs" default="hello">
				--项目中的目标    name标识目标名称   depends表示当前目标的依赖目标
					<target name="hello" depends="">
						--echo属性表示输出任务
						<echo>Hello world!</echo>
					</target>
					
					<property name="version" value="1.1.1" />
					
				</project> 
				每个property属性标签都必须指明name和value属性，
					之后可以通过 ${version} 引用数据，如在<echo>标签内使用<echo>Version is ${version}!</echo>
					
				************	
			通过${}语法可以将属性值插入到任务中
			
			！！！！属性也可以定义在外部的java属性文件中，并直接载入到ant中，
					如：建立properties属性文件，可以通过<loadproperties>标签的srcfile属性值引入属性文件，
						进而通过 ${} 语法与内部指定属性值相同用法来引用属性值。
		对于需要大量使用或者在多个ant脚本文件中使用的属性最好将他们放入外部的java属性文件中。
		
		一般至少声明几个用于可用于整个项目的属性，如：
			src.dir    ---源代码目录的根目录
			build.dir		---放置最终构建文件的路径
			lib.dir			--=依赖文件的路径
			
			
	5.  Buildr项目
		Buildr是一个用于寻找和收集前端相关且语法简单的Ant任务的开源项目。Buildr封装了所有在Ant脚本使用的各种工具；
		在使用Buildr前，可获得源码<import file="/path/to/buildr/buildr.xml"/>,使用此命令可以导入所有任务.
		
		
******************************************************************************************************************
==================================================================================================================

27. 校验 	#####################  需要重新看
	代码校验器JSLint与JSHint
	JSDocToolKit  JS文档生成工具
	
	
	
	
	......
	
******************************************************************************************************************
==================================================================================================================

28. 代码规范

	undefined 应避免使用判断一个值是否定义应当使用 typeof 运算符，
		例如： if (typeof varl === "undefined") {
				--代码
				}
				
	TODO    --代码未完成、
	XXX 	--代码有问题应尽快修复
	FIXME   --代码有问题应尽快修复，层级较低
	HACK	--代码走了一个捷径
	REVIEW	--代码任何的改动都需要评审
	
	
	
	严格模式应当仅限于函数内部
	
	三云运算符应当仅仅在条件赋值语句中，而不应作为替代if语句