责任链模式：
    为请求创建了一个接收者对象的链。
    含义：使多个对象都有机会处理同一个请求，从而避免请求的发送者与接收者之间耦合关系。
            将这些对象形成一条链并沿着该链传递请求，直到某个对象处理它为止。

    责任链模式  链 分为前驱和后继

    责任链模式：
        实现原理：Handler 里面聚合它自己，在 HandlerRequest 里判断是否合适，如果没达到条件则向下传递，
                    向谁传递之前 set 进去。
             最重要的两点，一个是你需要事先给每个具体管理者设置它的上司是哪个类，也就是设置后继者。
             另一点就是你需要在每个具体管理者处理请求时，做出判断，是可以处理这个请求，
             还是必须要“推卸责任”，转移给后继者去处理。

        使用场景：
            1、有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。

            2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。

            3、可动态指定一组对象处理请求。


责任链模式与策略模式：
    责任链模式处理多个对象先后共同处理同一个请求，请求并不知道是哪个对象处理了请求，降低了耦合；
    而策略模式用于根据不同的请求适用不同的策略类，每个对象单独处理对应的请求。



接口原则：
    一、开闭原则；一个软件实体如类、模块和函数，应该对扩展开放，对修改关闭
    二、里氏替换原则；所有引用基类的地方必须能透明地使用其子类的对象
    三、接口隔离原则；保证接口的纯结性：
                         1.接口要尽量小。
                         2.接口要高内聚。
                         3.定制服务。
                         4.接口的设计是有限度的。

                      最佳实践：
                         1.一个接口只服务于一个子模块或业务逻辑。
                         2.通过业务逻辑压缩接口中的public方法，接口时常去回顾，尽量让接口达到“满身筋骨肉”，而不是“肥嘟嘟”的一大堆方法。
                         3.已经被污染了的接口，尽量去修改，若变更的风险较大，则采用适配器模式进行转化处理。
                         4.了解环境，拒绝盲从。每个项目或产品都有特定的环境因素，不要盲从大师的设计，要根据业务逻辑进行最好的接口设计。
    四、依赖倒转原则；面向接口编程。
                      最佳实践：
                        1.每个类尽量都有接口或抽象类，或者抽象类和接口两者都具备。
                        2.变量的表面类型尽量是接口或抽象类。
                        3.任何类都不应该从具体类派生。
                        4.尽量不要覆写基类的方法。
                        5.结合里氏替换原则使用。
    五、迪米特原则；通俗来讲：一个类应该对自己需要耦合或调用的类知道得最少，你（被耦合或调用的类）的内部是如何复杂都和我没有关系，
                        那是你的事情，我就调用你提供的public方法，其他一概不关心。

                    低耦合要求：
                    1.只和朋友交流
                    朋友类：出现在成员变量、方法的输入输出参数中的类。方法体内部的类不属于朋友类。
                    2.朋友间也是有距离的
                    迪米特法则要求类“羞涩”一点，尽量不要对外公布太多的public方法和非静态的public变量，尽量内敛，多使用private、package-private、protected等访问权限。
                    3.是自己的就是自己的
                    如果一个方法放在本类中，既不增加类间关系，也对本类不产生负面影响，就放置在本类中。
                    4.谨慎使用Serializable
    六、单一职责原则。
                应该根据实际业务情况而定。关注变化点。

                实际使用时，类很难做到职责单一，但是接口的职责应该尽量单一。