本包学习适配器模式：

适配器模式：
    将一个类的接口转换成客户希望的另一个接口；适配器模式让那些不兼容的类一起工作。
    适配器模式 又称包装器模式，既可以作为类结构型模式，又可以作为对象结构型模式。

适配器模式包含三个角色：
    目标抽象类：目标抽象类定义客户所需的接口，可以是一个抽象类或接口，也可以是具体类。在类适配器中，
                由于C#语言不支持多重继承，所以它只能是接口
    适配器类：它可以调用另一个接口，作为一个转换器，对适配者类和目标抽象类进行适配。它是适配器模式的核心。
    适配者类：适配者类即被适配的角色，该类定义了一个已经存在的接口，
            这个接口需要适配，适配者类包装了客户需要的业务方法。

适配器模式分为两种：
    类适配器模式：
        原理：是通过继承来实现适配器功能；
            如，我们需要访问的接口A中没有我们需要的方法，但是在接口B中有需要的方法，同时不能改变访问的接口，
            需要一个转换适配器将进行中转，适配器实现访问的接口A，再继承接口B的实现类，就可以在适配器中访问
            接口B的实现类中的实现方法


    对象适配器模式：
        原理：通过组合的方式来实现适配器功能；
            即适配器类要实现访问的接口A，同时在适配器中添加私有对象，并添加带参构造器为私有对象赋值，
            再在接口A对应的实现方法中实现调用需要的方法。


#####接口适配器模式：
        原理：通过抽象类来实现适配，与上述有所区别。
        当存在这样一个接口，其中定义了N多的方法，而我们现在却只想使用其中的一个到几个方法，
        如果我们直接实现接口，那么我们要对所有的方法进行实现，哪怕我们仅仅是对不需要的方法进行置空
        （只写一对大括号，不做具体方法实现）也会导致这个类变得臃肿，调用也不方便，这时我们可以使用
        一个抽象类作为中间件，即适配器，用这个抽象类实现接口，而在抽象类中所有的方法都进行置空，
        那么我们在创建抽象类的继承类，而且重写我们需要使用的那几个方法即可。


4、适配器模式应用场景

类适配器与对象适配器的使用场景一致，仅仅是实现手段稍有区别，二者主要用于如下场景：

　　（1）想要使用一个已经存在的类，但是它却不符合现有的接口规范，导致无法直接去访问，
这时创建一个适配器就能间接去访问这个类中的方法。

　　（2）我们有一个类，想将其设计为可重用的类（可被多处访问），我们可以创建适配器来将这个类来适配
其他没有提供合适接口的类。

　　以上两个场景其实就是从两个角度来描述一类问题，那就是要访问的方法不在合适的接口里，一个从接口出发（被访问），
一个从访问出发（主动访问）。

接口适配器使用场景：

　　（1）想要使用接口中的某个或某些方法，但是接口中有太多方法，我们要使用时必须实现接口并实现其中的所有方法，
可以使用抽象类来实现接口，并不对方法进行实现（仅置空），然后我们再继承这个抽象类来通过重写想用的方法的方式来实现。这个抽象类就是适配器。