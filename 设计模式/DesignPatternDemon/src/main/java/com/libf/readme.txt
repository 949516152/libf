本包学习java设计模式：

    设计模式六大原则：
        开闭原则：是面向对象的可复用设计的第一块基石，是最重要的面向对象的设计原则。
            一个实体应尽量对拓展开放，对修改关闭，即尽量在不改变原有代码的原则下拓展。
            为了满足开闭原则，需要对系统进行抽象化设计，抽象化是开闭原则的关键。

        单一职责原则：是实现高内聚、低耦合的指导方针。

        迪米特原则：又称最少知识原则，一个软件实体应尽可能少的与其他实体发生相互作用。
            如果一个系统符合迪米特法则，那么当其中一个模块发生修改时，就会尽量少地影响其他模块，扩展相对容易。
            迪米特原则可以降低系统的耦合度，使类与类之间保持送伞的耦合关系。
            在迪米特法则中，与一个对象相关的有：
                当前对象本身this；
                以参数形式传入到当前对象方法的对象；
                当前对象的成员对象；
                如果当前对象的成员对象是一个集合，那么包括集合中的元素；
                当前对象所创建的对象。

              迪米特法则要求一个对象应尽可能少的与其他无关对象发生联系。


              迪米特法则要求：
                应尽量减少对象之间的交互，如果两个对象之间不必直接通信，那么这两个对象就不应当发生任何直接的
                相互作用；如果一个对象需要调用另一个对象的方法时，可以通过第三者转发这个调用，就是通过引入
                第三者来降低现有对象之间的耦合度。

              迪米特法则运用到系统设计上：
                在类的划分上，尽可能创建松耦合的类，类之间的耦合度越低越有利于复用，一个处于松耦合出的类被修改，
                不会对关联的类造成太大的影响；
                在类的结构设计上，每一个类都用该尽量降低成员变量和成员函数的访问权限；
                在类的设计上，只要有可能，一个类尽可能设计成不变类，在对其它类的引用上，一个对象对其他对象的引用
                应该降到最低。


        接口隔离原则：
            使用多个接口而不是使用单个总接口。每一个接口应该承担一种相对独立的角色，
            在使用接口隔离原则时，需注意控制接口的粒度，接口不能太小，如果接口太小会导致接口泛滥，不利于维护；
                接口也不能太大，太大违背了接口隔离的原则。一般而言，接口中仅包含为某一类用户定制的方法，
                而不应强迫用户依赖那些他们不用的方法。

        依赖倒转原则：是实现面向对象设计的主要实现机制之一
            抽象不应该依赖细节，细节应该依赖抽象，即针对接口编程，而不是针对实现编程。
            依赖倒转原则要求在传参或在关联关系中，尽量引用层次高的抽象层类，即使用抽象类和接口进行变量类型声明，
            参数类型声明，方法返回类型声明，及数据类型的转换，而不使用具体类。
                为了确保依赖倒转原则，一个具体类应该只实现接口或抽象类声明的方法，而不要给出多余的方法，
                    否则无法调用子类中新增的方法。

                 在引入抽象层后，系统将具有很好的灵活性，在程序中尽量使用抽象层进行编程，
                 而将具体类写在配置文件中，这样一来，如果系统行为发生变化，只需要对抽象层进行扩展，
                 并修改配置文件，而无须修改原有系统的源代码，在不修改的情况下来扩展系统的功能，
                 满足开闭原则的要求。

=========》开闭原则、里氏代换原则和依赖倒转原则，在大多数情况下，这三个设计原则会同时出现，
            开闭原则是目标，里氏代换原则是基础，依赖倒转原则是手段，相辅相成，互相补充。

        里氏替换原则：所有引用基类（父类）的地方必须能够透明的使用其子类的对象。将一个基类对象替换成它的子类对象，
                    程序不会有任何异常和错误；反之，则不成立。所以使用基类类型来对对象进行定义，运行时再确定
                    其子类的类型，用子类对象替换基类对象。

             使用里氏替换原则需注意的问题：
                1，子类的所有方法必须在父类中声明，或子类必须实现父类声明的所有方法。
                2，尽量将父类设计为抽象类或接口，让子类去继承或实现父接口，并实现父类中声明的方法。


 设计模式种类：（23种）
    1、策略模式
    2、代理模式
    3、责任链模式
    4、观察者模式
    5、装饰器模式
    6、模板模式
    7、工厂模式
    8、抽象工厂模式
    9、过滤器模式
    10、适配器模式（包装器模式Wrapper）
    11、单例模式