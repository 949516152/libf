本包学习观察者模式：

观察者模式：
    在对象之间定义一对多的依赖，当对象发生变化时，依赖它的对象就会收到通知并自动更新。

    该模式有四个角色：
        抽象被观察者角色：即是一个抽象主题，他把所有对观察者对象的引用保存在一个集合，
                            每个主题都可以有人以数量的观察者，抽象主题提供一个接口，可以增加和删除观察者角色，
                            一般用一个抽象类和接口实现
        抽象观察者角色：为所有的观察者定义一个接口，在得到主题通知时更新自己。
        具体被观察者角色：即一个具体的主题，在主题的内部状态改变时，向所有登记过的观察者发出通知；可以进行拓展。
        具体观察者角色：实现抽象观察者角色所需的更新接口，


    观察者模式：共有四个角色：抽象被观察者角色、具体被观察者角色、抽象观察者角色、具体观察者角色；
    ======》被观察者角色对观察者进行注册删除吗，并发布消息；
    ======》观察者角色接口被观察者的通知，进行信息更新处理。


注意事项： 1、JAVA 中已经有了对观察者模式的支持类。 2、避免循环引用。 3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。

观察者模式接口消息的方式模型有两种：推模型与拉模型。
    推模型是由 目标对象向观察者推送数据；
    拉模型是由 观察者从被观察者提供的数据查询数据。

通过java类中的被观察者与观察者接口 设置观察者模式：
    java中的观察者与被观察者接口，开发人员可以通过继承类或实现接口的形式配置观察者模式，
        在被观察者抽象类中，有通知变化标识，当被观察者发生变化时，需调用setChanged方法，修改被观察者的变化标识，
            执行观察者模式时，程序会自动清除变化标识


遗留问题：如何实现观察者模式的异步形式？？？？

